{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.96fe520b9c424df83268.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport _ from 'lodash'\r\n\r\nimport '../styles/index.scss'\r\nimport Head from 'next/head'\r\nimport Header from '../components/Header'\r\nimport Landing from '../components/Landing'\r\nimport About from '../components/About'\r\nimport Skills from '../components/Skills'\r\nimport Projects from '../components/Projects'\r\nimport Footer from '../components/Footer'\r\nimport lg  from './../data'\r\n\r\nclass App extends Component{ \r\n\r\n    state = {\r\n        isMenuOpen: false,\r\n        lg: lg.en,\r\n        indexOfIntroOpened : -1,\r\n        windowSmaller620px: false,\r\n        scrollY: 0\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.storeScrollY = _.throttle(this.storeScrollY.bind(this), 100)\r\n      }\r\n    \r\n      storeScrollY() {{\r\n          if(window.scrollY !== this.state.scrollY) \r\n            this.setState(() => ({ scrollY: window.scrollY }))\r\n        }\r\n      }\r\n    \r\n    toggleLanguage = (e) => {\r\n        e.persist()\r\n        this.setState(() => ({ lg: lg[e.target.value] }))\r\n    } \r\n\r\n    // if isMenuOpen changes, elements will translate properly\r\n    displayMenu = () => {\r\n        this.setState(({ isMenuOpen }) => ({ isMenuOpen : !isMenuOpen }))\r\n    }\r\n\r\n    resize = () => {\r\n        if(window.innerWidth < 620 && !this.state.windowSmaller620px) {\r\n            this.trackScrollToSetOpenIntroBox()\r\n        }\r\n\r\n        if(window.innerWidth >= 620 && this.state.windowSmaller620px) {\r\n            this.trackScrollToSetOpenIntroBox(false)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const language = localStorage.getItem('lg')\r\n        if(language) {\r\n            this.setState(() => ({lg: lg[language]}))\r\n        }\r\n\r\n        if(typeof(window) === 'undefined') { return }\r\n        this.storeScrollY()\r\n\r\n        window.addEventListener(\"scroll\", this.storeScrollY)\r\n\r\n        window.onload = () => {\r\n\r\n            if(window.innerWidth < 620) {\r\n                this.trackScrollToSetOpenIntroBox()\r\n            }\r\n            //on resize: verifies if boundary width is passed. if so trackScroll is invoked\r\n            window.addEventListener('resize', () => {\r\n                \r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"scroll\", this.storeScrollY);\r\n      }\r\n\r\n    trackScrollToSetOpenIntroBox = (track = true) => {\r\n        const intros = [...document.querySelectorAll('.intro')]\r\n        const mapScrollYs = intros.map(intro => {\r\n            return {\r\n                top: intro.getBoundingClientRect().top + window.scrollY,\r\n                bottom: intro.getBoundingClientRect().bottom + window.scrollY,                    \r\n            }\r\n        \r\n        })\r\n        this.setIndexOfIntroOpened(mapScrollYs)\r\n\r\n        //bellow: we need a named function so it is removable from listener event\r\n        // we remove if window resizes to a width where 'scroll' event is no longer wanted to be listened\r\n        const that = this\r\n        function setIndex() {\r\n            const intros = [...document.querySelectorAll('.intro')]\r\n\r\n            // why add window.scrollY: so we get el position relative to the top, indepedent of the initial page scroll\r\n            // afterwards we use only window.scrollY to compare these values\r\n            const mapScrollYs = intros.map(intro => {\r\n            return {\r\n                top: intro.getBoundingClientRect().top + window.scrollY,\r\n                bottom: intro.getBoundingClientRect().bottom + window.scrollY,                    \r\n                }\r\n        \r\n            })\r\n            that.setIndexOfIntroOpened.call(that, mapScrollYs)\r\n        }\r\n\r\n        // verifies if 'scroll' event listener should be added or not\r\n        if(!track) {\r\n            window.removeEventListener('scroll', setIndex)\r\n            this.setState(() => ({windowSmaller620px : false}))\r\n        } else {\r\n            window.addEventListener('scroll', setIndex)\r\n            this.setState(() => ({windowSmaller620px : true}))\r\n        }\r\n    }\r\n\r\n    setIndexOfIntroOpened = (mapScrollYs) => {\r\n        // here we find if an element is on a frame where should be displayed, hence animating its intro child tag\r\n        const openIntroIndex = mapScrollYs.findIndex(scrollY => window.scrollY > scrollY.top - window.innerHeight/2 && window.scrollY < scrollY.bottom - window.innerHeight/2)\r\n\r\n        // we check if the one found is different from the value from state\r\n        if (openIntroIndex !== this.state.indexOfIntroOpened ) {\r\n            this.setState(() => ({ indexOfIntroOpened: openIntroIndex }))\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { lg } = this.state\r\n        \r\n        return(\r\n        <div>\r\n            <Head>\t  \r\n            <title>Rafael Portfolio</title>\r\n            <meta charSet=\"utf-8\"/>\r\n            <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\r\n            <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\r\n            </Head>\r\n            <Header \r\n                displayMenu={this.displayMenu} \r\n                isMenuOpen={this.state.isMenuOpen} \r\n                text={lg.header} />\r\n\r\n            <main className={`main ${this.state.isMenuOpen ? 'main-animate' : ''}`}>\r\n                <Landing toggleLanguage={this.toggleLanguage} text={lg.landing} />\r\n                <About      \r\n                    text = {lg.about}\r\n                    isIntroOpen={this.state.indexOfIntroOpened === 0}\r\n                 />\r\n                <Skills     \r\n                    text = {lg.skills}\r\n                    isIntroOpen={this.state.indexOfIntroOpened === 1}\r\n                    scrollY={this.state.scrollY}\r\n                />\r\n                <Projects   \r\n                    text = {lg.projects}\r\n                    isIntroOpen={this.state.indexOfIntroOpened === 2}\r\n                />\r\n            </main>\r\n            <Footer text={lg.footer} isMenuOpen={this.state.isMenuOpen} />\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAUA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAPA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAfA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AA2DA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAGA;AACA;AACA;AADA;AACA;AAAA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAjGA;AAmGA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAzGA;AAFA;AAGA;AACA;;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AAsBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;;;AAEA;AACA;AACA;;;AAoDA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AA1JA;AACA;AA4JA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}